<link rel="stylesheet" href="//code.jquery.com/ui/1.11.0/themes/smoothness/jquery-ui.css">
<script src="//maps.google.com/maps/api/js?v=3.13&sensor=false&libraries=geometry" type="text/javascript"></script>
<script src="//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js" type="text/javascript"></script>
<% provide(:title, 'Manage Trips') %>
<div class="container fill">
  <br/>
  <div class="row fill">
    <div class="col-md-8 fill">
      <div id="map-canvas" onload="initialize" style="width: 100%; height: 50%"></div>  
      <br/>
      <div id="graph" style="height:40%"></div>
    </div>
    <div class="col-md-4 fill">
      <div id="selectors" style="height:30%">
        <label for="from">From</label>
        <input type="text" id="from" name="from">
        <label for="to">to</label>
        <input type="text" id="to" name="to"> 
        <div id="slider-range"></div>
        <span id="time"></span>
      </div>
      <br/>
      <div id="table" style="height:60%">
          <div id="accordion"> 
          </div>
      </div>
  </div>
  <div id="trips_data_text" style="visibility:hidden;"></div>
  <div id="trips_range_text" style="visibility:hidden;"></div>
</div> 
<script>
$( document ).ready(function() {
  
  $(function() {
    $( "#accordion" ).accordion({collapsible:true});
  });
  $(function() {
    $( "#from" ).datepicker({
      defaultDate: "+1w",
      changeMonth: true,
      numberOfMonths: 3,
      onClose: function( selectedDate ) {
        $( "#to" ).datepicker( "option", "minDate", selectedDate );
      }
    });
    $( "#to" ).datepicker({
      defaultDate: "+1w",
      changeMonth: true,
      numberOfMonths: 3,
      onClose: function( selectedDate ) {
        $( "#from" ).datepicker( "option", "maxDate", selectedDate );
      }
    });
  });
  $("#slider-range").slider({
        range: true,
        min: 0,
        max: 1439,
        values: [540, 1020],
        slide: slideTime
  });
  function slideTime(event, ui){
    var val0 = $("#slider-range").slider("values", 0),
        val1 = $("#slider-range").slider("values", 1),
        minutes0 = parseInt(val0 % 60, 10),
        hours0 = parseInt(val0 / 60 % 24, 10),
        minutes1 = parseInt(val1 % 60, 10),
        hours1 = parseInt(val1 / 60 % 24, 10);
    startTime = getTime(hours0, minutes0);
    endTime = getTime(hours1, minutes1);
    $("#time").text(startTime + ' - ' + endTime);
  }
  function getTime(hours, minutes) {
    var time = null;
    minutes = minutes + "";
    if (hours < 12) {
        time = "AM";
    }
    else {
        time = "PM";
    }
    if (hours == 0) {
        hours = 12;
    }
    if (hours > 12) {
        hours = hours - 12;
    }
    if (minutes.length == 1) {
        minutes = "0" + minutes;
    }
    return hours + ":" + minutes + " " + time;
  }
  slideTime();
  //GET USERS ON PAGELOAD
  trips_with_range(["1"], "2012-07-15 20:40:00 -5", '2017-07-20 01:32:44 -5');
});
var map;
function initialize() {
  var mapOptions = {
    center: new google.maps.LatLng(-34.397, 150.644),
    zoom: 8
  };
  map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
}
google.maps.event.addDomListener(window, 'load', initialize);
var user_json;
function updateUserJSON(){
  user_json = jQuery.parseJSON($("#trips_range_text").html())
  var lis = ""
  for (var i = 0, u; i <user_json.users.length; i++) {
     lis = lis.concat("<h3>");
     u = user_json.users[i];
     lis = lis.concat(u.email);
     lis = lis.concat("</h3>");
     if (u.trips.length == 0){
       lis = lis.concat("<div><p>No Trips!</p></div>");
     }
     lis = lis.concat("<div><p><ul class='list-group'>");
     for (var j = 0, t; j <u.trips.length; j++){
       lis = lis.concat("<li class='list-group-item trip' onclick='selected(");
       lis = lis.concat(u.trips[j].id);
       lis = lis.concat(")'>");
       d = new Date(u.trips[j].created_at);
       lis = lis.concat(u.trips[j].name);
       lis = lis.concat("<br/>");
       lis = lis.concat(timeSince(d));
       lis = lis.concat("<br/>SCORE: ");
       lis = lis.concat(u.trips[j].score.scoreAverage);
       lis = lis.concat("</li>");
       drawRoute(u.trips[j]);
     }
     lis = lis.concat("</ul></p></div>");
  }
  $("#accordion").html(lis);
  $("#accordion").accordion("refresh");
  $(".trip").click(function () {
    $(this).toggleClass("blue");
  });
}
function drawRoute(trip){
  var tripCoordinates = [];
  for (var i = 0; i < trip.coordinates.length; i++){
    tripCoordinates.push(new google.maps.LatLng(trip.coordinates[i].latitude, trip.coordinates[i].longitude));
  }
  var tripPath = new google.maps.Polyline({
    path: tripCoordinates,
    geodesic: true,
    strokeColor: "#" + Math.random().toString(16).slice(2, 8),
    strokeOpacity: 1.0,
    strokeWeight: 2
  });
  half = parseInt(trip.coordinates.length/2);
  map.setCenter(new google.maps.LatLng(trip.coordinates[half].latitude,trip.coordinates[half].longitude))
  tripPath.setMap(map);
}
google.maps.event.addDomListener(window, 'load', initialize);
function timeSince(date) {

    var seconds = Math.floor((new Date() - date) / 1000);

    var interval = Math.floor(seconds / 31536000);

    if (interval > 1) {
        return interval + " years ago";
    }
    interval = Math.floor(seconds / 2592000);
    if (interval > 1) {
        return interval + " months ago";
    }
    interval = Math.floor(seconds / 86400);
    if (interval > 1) {
        return interval + " days ago";
    }
    interval = Math.floor(seconds / 3600);
    if (interval > 1) {
        return interval + " hours ago";
    }
    interval = Math.floor(seconds / 60);
    if (interval > 1) {
        return interval + " minutes ago";
    }
    return Math.floor(seconds) + " seconds ago";
}
function drawChart(){
   trips_json = jQuery.parseJSON($("#trips_data_text").html());
   dic_list = [];
   for (var j = 0; j < trips_json.trips.length; j++){ 
     var dic = {};
     dic['name'] = "";
     dic['data'] = []
     ini = trips_json.trips[j].score.patterns[0].start_time
     for (var i = 0; i < trips_json.trips[j].score.patterns.length; i++){
       tups = [];
       var z = trips_json.trips[j].score.patterns[i];
       var a = z.start_time - ini;
       var b = z.raw_score;
       if (b > 0){
         dic['data'].push([a,b]);
       }
     }
     dic_list.push(dic);
   }
   $('#graph').highcharts({
        credits: {
            enabled: false
        },
        chart: {
            type: 'scatter',
            zoomType: 'xy'
        },
        title: {
            text: 'Chart'
        },
        xAxis: {
            title: {
                text: 'time'
            }
        },
        yAxis: {
            title: {
                text: 'score'
            }
        },
        series: dic_list
    });
}
var all_selected = []
function selected(trip_id){
  if ($.inArray(trip_id, all_selected)>-1){
    all_selected.splice( $.inArray(trip_id, all_selected), 1 );
  }else{
    all_selected.push(trip_id);
    trips_data(all_selected);
  }
}
</script>
<style>
.trip { background-color: #FFFFFF; }
.trip.blue { background-color: #AFEEEE; border-color:black }
</style>
