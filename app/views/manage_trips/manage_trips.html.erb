<% provide(:title, 'Manage Trips') %>
<%= include_gon %>

<div class="container trip-viewer-container" >
  <div class="row fill">

    <div class="col-md-7 fill">
      <div id="map-canvas" class="well" onload="initialize"></div>  
      <div id="graph"></div>
    </div>

    <div class="col-md-5 fill">
      <div class= "row" id="selectors" height:"30%">
        <div class = "col-md-6">
          <input class = "calSpeed" value="" onchange="update()" id="from" name="from">
        </div>
        <div class = "col-md-6">
          <input class = "calSpeed" value="" onchange="update()" id="to" name="to">
        </div>
      </div>
      <hr/>
      <div class="row">
        <div class = "col-md-6">
          <h3>Events</h3>
          <div class="checkbox">
            <label>
              <input onclick="drawChart()" checked type="checkbox" id="brakes" value="">
              Brakes
            </label>
          </div>
          <div class="checkbox">
            <label>
              <input onclick="drawChart()" checked type="checkbox" id="accelerations" value="">
              Accelerations
            </label>
          </div>
          <div class="checkbox">
            <label>
              <input onclick="drawChart()" checked type="checkbox" id="turns" value="">
              Turns
            </label>
          </div>
        </div>
        <div class = "col-md-6">
          <h3>Analytics</h3>
          <div class="checkbox">
            <label>
              <input onclick="drawChart()" type="checkbox" id="scores" checked>
              Scores
            </label>
          </div>
          <div class="checkbox">
            <label>
              <input onclick="drawChart()" type="checkbox" id="speeds" disabled>
              Speed
            </label>
          </div>
          
        </div>
      </div>
      <hr/>
      <div id="trip-table">
          <div id="accordion"> 
          </div>
      </div>

  </div>

  <div id="trips_data_text"></div>
  <div id="trips_range_text"></div>
</div>


<script>
function update(){
  var start = $('#from').datepicker('getDate');
  var end = $('#to').datepicker('getDate');
  start = datePickerToTime(start);
  end = datePickerToTime(end);
  var target = document.getElementById('trip-table');
  spinner = new Spinner(opts).spin(target);
  trips_with_range([gon.current_user,3], start, end);
}

function reasonableTime(time){
   var retTime = time.getFullYear() + "-" + (time.getMonth() + 1) + "-" + time.getDate() + " " + time.getHours() + ":" + time.getMinutes() + ":" + time.getSeconds() + " " + (0 - time.getTimezoneOffset()/60);
   return retTime
}
function datePickerToTime(date){
  //TODO: actual timezone
  var retTime = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " 00:00:00 -5";
  return retTime
}
var spinner;
var opts = {
    lines: 13, // The number of lines to draw
    length: 20, // The length of each line
    width: 10, // The line thickness
    radius: 30, // The radius of the inner circle
    corners: 1, // Corner roundness (0..1)
    rotate: 0, // The rotation offset
    direction: 1, // 1: clockwise, -1: counterclockwise
    color: '#000', // #rgb or #rrggbb or array of colors
    speed: 1, // Rounds per second
    trail: 60, // Afterglow percentage
    shadow: false, // Whether to render a shadow
    hwaccel: false, // Whether to use hardware acceleration
    className: 'spinner', // The CSS class to assign to the spinner
    zIndex: 2e9, // The z-index (defaults to 2000000000)
    top: '50%', // Top position relative to parent
    left: '50%' // Left position relative to parent
};

$( document ).ready(function() {
  $( "#accordion" ).accordion({collapsible:true});
  $( "#from" ).datepicker();
  $( "#to" ).datepicker();
  to = new Date();
  from = new Date();
  from.setDate(from.getDate() - 365);
  $("#to").val(to);
  $("#from").val(from);
  var now = new Date();
  now = reasonableTime(now);
  var oYA = new Date();
  oYA.setDate(oYA.getDate() - 365);
  oYA = reasonableTime(oYA);
  var target = document.getElementById('trip-table');
  spinner = new Spinner(opts).spin(target);
  trips_with_range([gon.current_user,3], oYA, now);
});
var map;
function initialize() {
  var mapOptions = {
    //TODO: Better Center
    center: new google.maps.LatLng(43.06, -89.4),
    zoom: 15
  };
  map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
}
google.maps.event.addDomListener(window, 'load', initialize);
var user_json;
function updateUserJSON(){
  user_json = jQuery.parseJSON($("#trips_range_text").html())
  var lis = ""
  for (var i = 0, u; i <user_json.users.length; i++) {
     lis = lis.concat("<h3>");
     u = user_json.users[i];
     lis = lis.concat(u.email);
     lis = lis.concat("</h3>");
     if (u.trips.length == 0){
       lis = lis.concat("<div><p>No Trips!</p></div>");
     }
     else {
       lis = lis.concat("<div><p><ul class='list-group'>");
       for (var j = 0, t; j <u.trips.length; j++){
         var color = "#" + Math.random().toString(16).slice(2, 8)
         //var color = "#000000"
         var cc;
         if (u.trips[j].score.scoreAverage > 90){
           cc = "btn btn-success"
         }else if (u.trips[j].score.scoreAverage > 80){
           cc = "btn btn-warning"
         }
         else{
           cc = "btn btn-danger"
         }
         //TODO: Duration
         lis = lis.concat("<li value=" + u.trips[j].id + " class='list-group-item trip' style='cursor: pointer; box-shadow: -3px 0px ")
         lis = lis.concat(color + "' onclick='selected(" + u.trips[j].id + ")'><div class='row'><div class='col-md-4'><b>");
         d = new Date(u.trips[j].time_stamp);
         lis = lis.concat(u.trips[j].name + "</b></div><div class='col-md-3'>" + timeSince(d)) + "</div>";
         lis = lis.concat("<div class='col-md-3'>"+Math.ceil(u.trips[j].duration/60)+" minutes </div>");
         lis = lis.concat("<div class='col-md-2'><button type='button' class='" + cc + "'>");
         lis = lis.concat(u.trips[j].score.scoreAverage);
         lis = lis.concat("</button></div></div></li>");
         drawRoute(u.trips[j],color);
       }
       lis = lis.concat("</ul></p></div>");
     } 
  }
  $("#accordion").html(lis);
  $("#accordion").accordion("refresh");

  spinner.stop();
}
var coordCircle
var linelist = [];
var smlist = []
var emlist = []
function drawRoute(trip,color){
  var tripCoordinates = [];
  for (var i = 0; i < trip.coordinates.length; i++){
    tripCoordinates.push(new google.maps.LatLng(trip.coordinates[i].latitude, trip.coordinates[i].longitude));
  }
  var start_marker = new google.maps.Marker({
    position: new google.maps.LatLng(trip.coordinates[0].latitude, trip.coordinates[0].longitude),
    title: "Start",
    icon: "/assets/car_map.png"
  });
  var end_marker = new google.maps.Marker({
    position: new google.maps.LatLng(trip.coordinates[trip.coordinates.length - 1].latitude, trip.coordinates[trip.coordinates.length - 1].longitude),
    title:"End",
    icon: "/assets/stop.png"
  });
  start_marker.setMap(map);
  end_marker.setMap(map);
  var tripPath = new google.maps.Polyline({
   path: tripCoordinates,
   geodesic: true,
   strokeColor: color,
   strokeOpacity: 1.0,
   strokeWeight: 3
  });
  
  half = parseInt(trip.coordinates.length/2);
  lat = trip.coordinates[0].latitude
  lon = trip.coordinates[0].longitude
  map.setCenter(new google.maps.LatLng(lat,lon));
  linelist.push(tripPath);
  smlist.push(start_marker);
  emlist.push(end_marker);
  index = linelist.length - 1;
  google.maps.event.addListener(linelist[index],'click', function() {
    selected(trip.id);
  });
  google.maps.event.addListener(smlist[index],'click', function() {
    selected(trip.id);
  });
  google.maps.event.addListener(emlist[index],'click', function() {
    selected(trip.id);
  });
  
  tripPath.setMap(map);
}
google.maps.event.addDomListener(window, 'load', initialize);
function timeSince(date) {

    var seconds = Math.floor((new Date() - date) / 1000);

    var interval = Math.floor(seconds / 31536000);

    if (interval > 1) {
        return interval + " years ago";
    }
    interval = Math.floor(seconds / 2592000);
    if (interval > 1) {
        return interval + " months ago";
    }
    interval = Math.floor(seconds / 86400);
    if (interval > 1) {
        return interval + " days ago";
    }
    interval = Math.floor(seconds / 3600);
    if (interval > 1) {
        return interval + " hours ago";
    }
    interval = Math.floor(seconds / 60);
    if (interval > 1) {
        return interval + " minutes ago";
    }
    return Math.floor(seconds) + " seconds ago";
}
var drawn = {}
function drawChart(){
   for (var key in drawn){
     for (var f = 0; f < drawn[key].length; f++) {
       drawn[key][f].setMap(null);
     }
   }
   trips_json = jQuery.parseJSON($("#trips_data_text").html());
   dic_list = [];
   for (var j = 0; j < trips_json.trips.length; j++){ 
     var dic = {};
     dic['name'] = trips_json.trips[j].name;
     dic['data'] = []
     var trip_coords;
     var trip_id;
     ini = trips_json.trips[j].score.patterns[0].start_time
     for (var m = 0; m<user_json.users.length; m++){
         for (var n = 0; n<user_json.users[m].trips.length; n++){
         if (user_json.users[m].trips[n].id == trips_json.trips[j].id){
             trip_id = user_json.users[m].trips[n].id
             trip_coords = user_json.users[m].trips[n].coordinates;
           }
         }
     }
     drawn[trip_id] = []
     checked_list = []
     if ($('#turns').is(':checked')){
       checked_list.push("turn");
     }
     if ($('#accelerations').is(':checked')){
       checked_list.push("acceleration");
     }
     if ($('#brakes').is(':checked')){
       checked_list.push("brake");
     }
     if ($('#scores').is(':checked')){
       checked_list.push("score");
     }
     if ($('#speeds').is(':checked')){
       checked_list.push("speed");
     }
     for (var i = 0; i < trips_json.trips[j].score.patterns.length; i++){
       tmp_dic = {};
       var z = trips_json.trips[j].score.patterns[i];
       tmp_dic['x'] = (Math.abs(new Date(z.start_time) - new Date(ini)))/60000;
       tmp_dic['name'] = z.pattern_type;
       if ($.inArray(tmp_dic['name'], checked_list)<0){
         continue;
       }
       tmp_dic['y'] = z.raw_score;
       tmp_dic['gps_id'] = z.gps_index_start
       for (var e = 0; e < trip_coords.length; e++){
         if (trip_coords[e].gps_id == tmp_dic.gps_id){
           tmp_dic['events'] = {}
           tmp_dic['lat'] = trip_coords[e].latitude
           tmp_dic['lon'] = trip_coords[e].longitude
           tmp_dic['events']['click'] = function(){map.setCenter(new google.maps.LatLng(this.lat,this.lon))};
           var color;
           if (tmp_dic['y'] >90){
             color = "#008000";
           }else if (tmp_dic['y'] >80){
             color = "#FFFF00";
           }else{
             color = "#FF0000";
           }
           var circleOptions = {
             map: map,
             center: new google.maps.LatLng(trip_coords[e].latitude,trip_coords[e].longitude),
             radius: 20,
             fillOpacity: 0.6,
             fillColor: color,
             strokeColor: color,
             strokeOpacity: 0.6,
           }
           circle = new google.maps.Circle(circleOptions)
           drawn[trip_id].push(circle);
         }
       }
       if (tmp_dic['y'] > 0){
         dic['data'].push(tmp_dic);
       }  
     }
     dic_list.push(dic);
   }
   var $reporting = $('#reporting');
   $('#graph').highcharts({
        plotOptions: {
            series: {
                point: {
                    events: {
                        mouseOver: function() {
                            $reporting.html('score: '+ this.y + ' pattern: ' + this.name);
                        }
                    }
                },
                events: {
                    mouseOut: function() {                        
                        $reporting.empty();
                    }
                }
            }
        },
        credits: {
            enabled: false
        },
        chart: {
            type: 'scatter',
            zoomType: 'xy'
        },
        title: {
            text: 'Chart'
        },
        tooltip: {
            formatter: function() {
                return 'Type: <b>'+ this.point.name +
                    '</b> Score: <b>'+ this.y +'</b>';
            }
        },
        xAxis: {
            title: {
                text: 'time (minutes)'
            }
        },
        yAxis: {
            title: {
                text: 'score'
            }
        },
        series: dic_list
    });
}
var all_selected = []
var look;
function selected(trip_id){
  if ($.inArray(trip_id, all_selected)>-1){
    all_selected.splice( $.inArray(trip_id, all_selected), 1 );
  }else{
    all_selected.push(trip_id);
  }
  if (all_selected.length > 0){
    $('#map-canvas').animate({height: '60%'},200,function(){$('#graph').css('height','40%');  $('#graph').show(); trips_data(all_selected);google.maps.event.trigger(map, 'resize');}); 
  }
  else{
    trips_data(all_selected)
    $('#graph').hide();
    $('#graph').animate({height:'0%'});
    //$('#map-canvas').animate({height: '100%%'});
    $('#map-canvas').css('height','100%%');
    google.maps.event.trigger(map, 'resize');
  }
  $('.trip').each(function() {
    if ($.inArray($(this).val(), all_selected) >= 0){
      $(this).addClass('blue');
    }else{
      $(this).removeClass('blue');
    }
    look = $(this);
  });
}
</script>
