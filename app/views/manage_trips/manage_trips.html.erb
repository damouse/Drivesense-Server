<link rel="stylesheet" href="//code.jquery.com/ui/1.11.0/themes/smoothness/jquery-ui.css">
<script src="//maps.google.com/maps/api/js?v=3.13&sensor=false&libraries=geometry" type="text/javascript"></script>
<script src="//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js" type="text/javascript"></script>

<% provide(:title, 'Manage Trips') %>
<%= include_gon %>
<div class="container" style="min-height: 95%; height:95%;">
  <br/>
  <div class="row fill">
    <div class="col-md-8 fill">
      <div id="map-canvas" class="well" onload="initialize" style="width: 100%; height: 90%"></div>  
      <br/>
      <div id="graph" style="height:0%"></div>
    </div>
    <div class="col-md-4 fill">
      <div class= "row" id="selectors" height:"30%">
        <div class = "col-md-6" value="" onchange=update() style="font-size: 7px" id="from" name="from"></div>
        <div class = "col-md-6" value="" onchange=update() style="font-size: 7px" id="to" name="to"></div>
        <div style="display:none" id="slider-range"></div>
        <span style="display:none" id="time"></span>
      </div>
      <br/>
      <div id="table" style="height:65%; overflow:auto">
          <div id="accordion"> 
          </div>
      </div>
  </div>
  <div id="trips_data_text" style="display:none;"></div>
  <div id="trips_range_text" style="display:none;"></div>
</div> 

<script>
function update(){
  var start = $('#from').datepicker('getDate');
  var end = $('#to').datepicker('getDate');
  start = datePickerToTime(start);
  end = datePickerToTime(end);
  trips_with_range([gon.current_user], start, end);
}
function reasonableTime(time){
   var retTime = time.getFullYear() + "-" + (time.getMonth() + 1) + "-" + time.getDate() + " " + time.getHours() + ":" + time.getMinutes() + ":" + time.getSeconds() + " " + (0 - time.getTimezoneOffset()/60);
   return retTime
}
function datePickerToTime(date){
  var retTime = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " 00:00:00 -5";
  return retTime
}
$( document ).ready(function() {
  $(function() {
    $( "#accordion" ).accordion({collapsible:true});
  });
  $(function() {
    $( "#from" ).datepicker();
    $( "#to" ).datepicker();
    to = new Date();
    from = new Date();
    from.setDate(from.getDate() - 365);
    $("#to").val(to);
    $("#from").val(from);
  });
  $("#slider-range").slider({
        range: true,
        min: 0,
        max: 1439,
        values: [0, 1439],
        slide: slideTime
  });
  function slideTime(event, ui){
    var val0 = $("#slider-range").slider("values", 0),
        val1 = $("#slider-range").slider("values", 1),
        minutes0 = parseInt(val0 % 60, 10),
        hours0 = parseInt(val0 / 60 % 24, 10),
        minutes1 = parseInt(val1 % 60, 10),
        hours1 = parseInt(val1 / 60 % 24, 10);
    startTime = getTime(hours0, minutes0);
    endTime = getTime(hours1, minutes1);
    $("#time").text(startTime + ' - ' + endTime);
  }
  function getTime(hours, minutes) {
    var time = null;
    minutes = minutes + "";
    if (hours < 12) {
        time = "AM";
    }
    else {
        time = "PM";
    }
    if (hours == 0) {
        hours = 12;
    }
    if (hours > 12) {
        hours = hours - 12;
    }
    if (minutes.length == 1) {
        minutes = "0" + minutes;
    }
    return hours + ":" + minutes + " " + time;
  }
  slideTime();
  //GET USERS ON PAGELOAD
  var now = new Date();
  now = reasonableTime(now);
  var oYA = new Date();
  oYA.setDate(oYA.getDate() - 365);
  oYA = reasonableTime(oYA);
  trips_with_range([gon.current_user], oYA, now);
});
var map;
function initialize() {
  var mapOptions = {
    center: new google.maps.LatLng(43.06, -89.4),
    zoom: 15
  };
  map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
}
google.maps.event.addDomListener(window, 'load', initialize);
var user_json;
function updateUserJSON(){
  user_json = jQuery.parseJSON($("#trips_range_text").html())
  var lis = ""
  for (var i = 0, u; i <user_json.users.length; i++) {
     lis = lis.concat("<h3>");
     u = user_json.users[i];
     lis = lis.concat(u.email);
     lis = lis.concat("</h3>");
     if (u.trips.length == 0){
       lis = lis.concat("<div><p>No Trips!</p></div>");
     }
     else {
       lis = lis.concat("<div><p><ul class='list-group'>");
       for (var j = 0, t; j <u.trips.length; j++){
         var color = "#" + Math.random().toString(16).slice(2, 8)
         lis = lis.concat("<li class='list-group-item trip' ") 
         lis = lis.concat("style='cursor: pointer; box-shadow: -3px 0px ");
         lis = lis.concat(color);
         lis = lis.concat("' onclick='selected(");
         lis = lis.concat(u.trips[j].id);
         lis = lis.concat(")'><b>");
         d = new Date(u.trips[j].time_stamp);
         lis = lis.concat(u.trips[j].name);
         lis = lis.concat("</b><br/>");
         lis = lis.concat(timeSince(d));
         lis = lis.concat("<br/>SCORE: ");
         lis = lis.concat(u.trips[j].scoreAverage);
         lis = lis.concat("</li>");
         drawRoute(u.trips[j],color);
       }
       lis = lis.concat("</ul></p></div>");
     } 
  }
  $("#accordion").html(lis);
  $("#accordion").accordion("refresh");
  $(".trip").click(function () {
    $(this).toggleClass("blue");
  });
}
var coordCircle
function drawRoute(trip,color){
  var tripCoordinates = [];
  for (var i = 0; i < trip.coordinates.length; i++){
    tripCoordinates.push(new google.maps.LatLng(trip.coordinates[i].latitude, trip.coordinates[i].longitude));
  }
  for (var i = 0; i<tripCoordinates.length; i++){
    var circleOptions = {
      strokeColor: color,
      map: map,
      center: tripCoordinates[i],
      radius: 2,
      fillColor: color,
      opacity: .5
    }
    coordCircle = new google.maps.Circle(circleOptions);
    
  }
  //var tripPath = new google.maps.Polyline({
  //  path: tripCoordinates,
  //  geodesic: true,
  //  strokeColor: color,
  //  strokeOpacity: 1.0,
  //  strokeWeight: 2
  //});
  //half = parseInt(trip.coordinates.length/2);
  //lat = trip.coordinates[0].latitude
  //lon = trip.coordinates[0].longitude
  //map.setCenter(new google.maps.LatLng(lat,lon));
  //console.log(lat,lon);
  //tripPath.setMap(map);
}
google.maps.event.addDomListener(window, 'load', initialize);
function timeSince(date) {

    var seconds = Math.floor((new Date() - date) / 1000);

    var interval = Math.floor(seconds / 31536000);

    if (interval > 1) {
        return interval + " years ago";
    }
    interval = Math.floor(seconds / 2592000);
    if (interval > 1) {
        return interval + " months ago";
    }
    interval = Math.floor(seconds / 86400);
    if (interval > 1) {
        return interval + " days ago";
    }
    interval = Math.floor(seconds / 3600);
    if (interval > 1) {
        return interval + " hours ago";
    }
    interval = Math.floor(seconds / 60);
    if (interval > 1) {
        return interval + " minutes ago";
    }
    return Math.floor(seconds) + " seconds ago";
}
function drawChart(){
   trips_json = jQuery.parseJSON($("#trips_data_text").html());
   dic_list = [];
   for (var j = 0; j < trips_json.trips.length; j++){ 
     var dic = {};
     dic['name'] = trips_json.trips[j].name;
     dic['data'] = []
     console.log("SCORE");
     console.log(trips_json.trips[j].score);
     ini = trips_json.trips[j].score.patterns[0].start_time
     console.log(ini);
     for (var i = 0; i < trips_json.trips[j].score.patterns.length; i++){
       tmp_dic = {};
       var z = trips_json.trips[j].score.patterns[i];
       console.log(Math.abs(new Date(z.start_time) - new Date(ini)));
       tmp_dic['x'] = Math.abs(new Date(z.start_time) - new Date(ini));
       tmp_dic['name'] = z.pattern_type;
       tmp_dic['y'] = z.raw_score;
       if (tmp_dic['y'] > 0){
         dic['data'].push(tmp_dic);
       }
     }
     dic_list.push(dic);
   }
   var $reporting = $('#reporting');
   $('#graph').highcharts({
        plotOptions: {
            series: {
                point: {
                    events: {
                        mouseOver: function() {
                            $reporting.html('score: '+ this.y + ' pattern: ' + this.name);
                        }
                    }
                },
                events: {
                    mouseOut: function() {                        
                        $reporting.empty();
                    }
                }
            }
        },
        credits: {
            enabled: false
        },
        chart: {
            type: 'scatter',
            zoomType: 'xy'
        },
        title: {
            text: 'Chart'
        },
        tooltip: {
            formatter: function() {
                return 'Type: <b>'+ this.point.name +
                    '</b> Score: <b>'+ this.y +'</b>';
            }
        },
        xAxis: {
            title: {
                text: 'time'
            }
        },
        yAxis: {
            title: {
                text: 'score'
            }
        },
        series: dic_list
    });
}
var all_selected = []
function selected(trip_id){
  if ($.inArray(trip_id, all_selected)>-1){
    all_selected.splice( $.inArray(trip_id, all_selected), 1 );
  }else{
    all_selected.push(trip_id);
  }
  if (all_selected.length > 0){
    $('#map-canvas').animate({height: '50%'},200,function(){$('#graph').css('height','40%');  $('#graph').show(); trips_data(all_selected);}); 
  }
  else{
    $('#graph').hide();
    $('#graph').animate({height:'0%'});
    $('#map-canvas').animate({height: '90%'});
  }
}
</script>
<style>
.trip { background-color: #FFFFFF; }
.trip.hover {background-color: #AFEEFF;}
.trip.blue { background-color: #CFEEFF;}
</style>
